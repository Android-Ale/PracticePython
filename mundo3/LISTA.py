#NO CASO DAS LISTAS, ELAS SÃO MUITO PARECIDAS COM A TUPLAS, A ÚNICA COISA QUE MUDA É:
#QUE A LISTA É MUTAVÉL, AO CONTRÁRIO DA TUPLA.
#E COM A LISTA AINDA PODE ADICIONAR MAIS ELEMENTO, UTILIZANDO OS METODOS:
# .append() QUE CRIA UM ELEMENTO NO FINAL DA LISTA
# .insert() QUE CRIA EM QUALQUER LOCAL DA LISTA. ex lista.insert(0.elemento) -> ele colocará no ínício.


#COMO APAGAR ELEMENTO DA LISTA PODE USAR TRÊS METÔDOS:
#del POR EXEMPLO:      dellista[4]  -> APAGANDO O 4° ELEMENTO DA LISTA.
#pop() POR EXEMPLO:    lista.pop(4) -> APAGANDO O 4° ELEMENTO DA LISTA.
'''SE COLOCAR APENAS lista.pop(), SEM COLOCAR O NÚMERO DO ELEMENTO ELE IRÁ DELETAR O ÚLTIMO ELEMENTO.'''
#remove() POR EXEMPLO: lista.remove(elemento) -> NO METÔDO remove DEVE-SE COLOCAR O ELEMENTO QUE
#DESEJA SER EXCLUIDO.


valor = list(range(4, 11))   #-> ELE COLOCA OS ELEMENTOS DE 4 A 10 NA VARIAVEL VALOR.
valor = list(range(4, 2, 11))#-> AQUI É A MESMA COISA SÓ QUE ELE PULA DE DOIS EM DOIS ELEMENTOS
#PARA COLOCAR ELEMENTOS NA ORDEM QUE VC QUISER, BASTA USAR A SINTAXE DESSE JEITO, ABAIXO:
valores = [8, 2, 5, 4, 8, 9]
#SE QUISER COLOCAR NA ORDEM BASTA UTILIZAR O METODO .sorted()
valores.sort()
#SE QUISER A ORDEM INVERSA, BASTA UTILIZAR O PARAMETRO NO METODO .sorted(), DESTA FORMA FICARÁ:
valores.sort(reverse=True)
#O PARAMENTRO É reverse=True


#A FUNÇÃO len PARA CONTAR QUANTOS ELEMENTOS EXISTEM NA LISTA, PARA UTILIZAR BASTA USAR A SINTAXE,ABAIXO:
len(valores)  #POIS TB É ÚTIL PARA FAZER LAÇOS
#PARA MOSTRAR NO PROGRAMA BASTA COLOCAR O PRINT:
print(len(valores))
lista = [9, 0, 2, 4, 8]
lista[0] = 3  #AQUI ELE COLOCA O ELEMENTO NO LOCAL DESEJADO(O 'zero' É AONDE O ELEMENTO 3 VAI FICAR.
print(lista)
lista.append(8) #ADICIONA MAIS UM ELEMENTO NO FINAL DA LISTA
print(lista)
#COLOCANDO OS ELEMENTOS DA LISTA EM ORDEM:
lista.sort()
print(lista)
#COLOCANDO OS ELEMENTOS DA LISTA EM ORDEM INVERTIDA:
lista.sort(reverse=True)
print(lista)
#CONTANDO QUANTOS ELEMENTOS TEM:
print(f'Essa lista têm {len(lista)} elementos')
lista.insert(1, 9)  # COLOCOU NA POSIÇÃO 1 O ELEMENTO 9
print(lista)
#REMOVENDO O ÚLTIMO ELEMENTO:
lista.pop()
print(lista)
#REMOVENDO O ELEMENTO ESCOLHIDO:
lista.pop(4)
print(lista)
#REMOVENDO O ELEMENTO ESCOLHIDO :
lista.remove(8) # QUANDO TÊM MAIS DE UM ELEMENTO IGUAIS, ELE ROMOVE O PRIMEIRO ELEMENTO ESCOLHIDO.
print(lista)
#USNDO O FOR, NA LINGUAGEM HUMANA IRÁ FICA: PARA CADA NÚMERO EM LISTA... IMPRIMA: NÚMERO:
for número in lista:
    print(f'{número}...') # SE QUISER COLOCA O end='' PARA NÃO PULAR LINHA.
# UTILIZANDO O FOR COM ENUMERATE
# (NA LINGUA HUMANA FICA: PARA CADA CONTADOR,NÚMERO EM LISTA, ENUMERADO...
# IMPRIMA:na prosição contador encontra-se número...)
for contador, número in enumerate(lista):
    print(f'na prosição {contador} encontra-se: {número}...')


#LENDO ELEMENTOS PELO TECLADO UTILIZANDO DO FOR:
elemento = []
for contador in range(0,5):
    elemento.append(int(input('Digite um número: ')))
print(elemento)


#APARTI DO MOMENTO QUE VC FAZ UMA LIGAÇÃO COM UMA LISTA COM OUTRA SE VC ALTERAR UMA LISTA
#TAMBÉM ALTERARÁ AUTOMÁTICAMENTE A OUTRA !!!
#ex:
lista1 = [1, 3, 8, 9]
lista2 = lista1
lista2[0] = 8   #ALTERANDO A LISTA 2 A OUTRA TAMBÉM IRÁ ALTERAR POIS FOI FEITO UMA LIGAÇÃO DE AMBAS.
print(f'lista 1: {lista1}')
print(f'lista 2: {lista2}')
#ENTÃO PARA NÃO CRIAR UMA LIGAÇÃO ENTRE UMA LISTA E OUTRA PRA NÃO ALTERAR AMBAS, VC PODE FAZER UMA
#CÓPIA DE UMA LISTA, PARA OUTRA, ASSIM NÃO ALTERARAR A OUTRA:
#ex:
lista3 = [1, 3, 8, 9]
lista4 = lista3[:] #FAZENDO ISSO VC CONCEGUI FAZER UMA CÓPIA DA LISTA PARA OUTRA.
lista4[0] = 8
print(f'lista3: {lista3}')
print(f'lista4: {lista4}') #AQUI VEMOS QUE A ÚNICA ALTERADA É A LISTA QUATRO.

